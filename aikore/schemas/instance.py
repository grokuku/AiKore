from pydantic import BaseModel

# --- Base Schema ---
# Defines the common attributes for an instance, used for creation and reading.
class InstanceBase(BaseModel):
    name: str
    base_blueprint: str
    gpu_ids: str | None = None
    autostart: bool = False
    persistent_mode: bool = False # <-- ADD THIS LINE

# --- Creation Schema ---
# Inherits from Base and is used specifically when creating a new instance via the API.
class InstanceCreate(InstanceBase):
    pass

# --- Read Schema ---
# This schema is used when returning instance data from the API.
# It includes attributes that are generated by the database (like `id` and `status`).
class Instance(InstanceBase):
    id: int
    status: str
    pid: int | None = None
    port: int | None = None

    class Config:
        # This tells Pydantic to read the data even if it is not a dict,
        # but an ORM model (like our SQLAlchemy model).
        from_attributes = True